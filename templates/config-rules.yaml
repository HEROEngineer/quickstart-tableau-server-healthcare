AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for config rules

Parameters:
  LogBucketName:
    Type: String
    Description: Log bucket
  ConfigRecorder:
    Type: String
    Default: ""
    Description: Config Recorder. Empty string will create a new Config Recorder.
  ConfigDeliveryChannel:
    Type: String
    Default: ""
    Description: Config Delivery Channel. Must have if Config Recorder specified.
  QSTagKey:
    Type: String
    Description: Tag key to identify resources from this Quick Start
  QSTagValue:
    Type: String
    Description: Tag value to identify resources from this Quick Start

Resources:
  # Restrict to resources with the appropriate tag key
  LambdaConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DescribeForConfig
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:DescribeLoadBalancers
            - elasticloadbalancing:DescribeListeners
            - elasticloadbalancing:DescribeTags
            - ec2:DescribeSecurityGroups
            Resource:
            - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
            - !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/*
            - !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/*
            - !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener-rule/*
            Condition:
              ForAnyValue:StringEquals:
                aws:TagKeys:
                - !Ref QSTagKey
  
  #CloudTrail log config change detected
  CloudTrailEnabled:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks whether AWS CloudTrail is enabled in your AWS account
      MaximumExecutionFrequency: One_Hour
      Scope:
        ComplianceResourceTypes:
        - AWS::CloudTrail::Trail
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENABLED
  
  #Config change detected
  TriggerConfigRecorderEnabled:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaConfigRecorderEnabled.Arn
      Principal: config.amazonaws.com
  RuleConfigRecorderEnabled:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ConfigRecorderEnabled
      Description: Checks if AWS Config recorder is turned on. N.B. This current rule does not check for S3 or SNS delivery mechanisms.
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt LambdaConfigRecorderEnabled.Arn
        SourceDetails:
        - EventSource: aws.config
          MaximumExecutionFrequency: One_Hour
          MessageType: ScheduledNotification
  LambdaConfigRecorderEnabled:
    Type: AWS::Lambda::Function
    Properties:
      Description: Checks if Config Recorder is enabled
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaConfigRole.Arn
      Timeout: 30
      Code:
        ZipFile: | 
          import boto3
          import json
          from datetime import datetime
          config = boto3.client('config')
          def evaluate_compliance(rule_parameters):
              # First check configuration recorder is created
              config_recorder_response = config.describe_configuration_recorder_status()
              if 'ConfigurationRecordersStatus' not in config_recorder_response or len(config_recorder_response['ConfigurationRecordersStatus']) < 1:
                  return {
                      'compliance_type': 'NON_COMPLIANT',
                      'annotation': 'Cannot find config recorder status'
                  }
              for config_recorder in config_recorder_response['ConfigurationRecordersStatus']:
                  if not config_recorder['recording']:
                      return {
                          'compliance_type': 'NON_COMPLIANT',
                          'annotation': 'Config recorder is not recording'
                      }
              # Check that there are delivery channels and that they're mapping to the appropriate buckets
              delivery_channels_response = config.describe_delivery_channels()
              if 'DeliveryChannels' not in delivery_channels_response or len(delivery_channels_response['DeliveryChannels']) < 1:
                  return {
                      'compliance_type': 'NON_COMPLIANT',
                      'annotation': 'No delivery channel for config recorder'
                  }
              return {
                  'compliance_type': 'COMPLIANT',
                  'annotation': 'Config recorder enabled with appropriate delivery channel'
              }
          def handler(event, context):
              today = datetime.today()
              rule_parameters = json.loads(event['ruleParameters']) if 'ruleParameters' in event else {}
              evaluation = evaluate_compliance(rule_parameters)
              result_token = event['resultToken'] if 'resultToken' in event else 'No token found'
              config.put_evaluations(
                  Evaluations=[
                      {
                          'ComplianceResourceType': 'AWS::::Account',
                          'ComplianceResourceId': event['accountId'],
                          'ComplianceType': evaluation['compliance_type'],
                          'Annotation': evaluation['annotation'],
                          'OrderingTimestamp': datetime(today.year, today.month, today.day, today.hour)
                      }
                  ],
                  ResultToken=result_token
              )
          
  #ELB Config change detected
  TriggerALBEncryption:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaALBEncryption.Arn
      Principal: config.amazonaws.com
  RuleALBEncryption:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ALBEncryption
      Description: Checks to ensure that all application load balancers are only reachable via HTTPS endpoints and not HTTP as well as have a cert on the listener
      InputParameters:
        DesiredPort: 443
        DesiredProtocol: HTTPS
        TagKey: !Ref QSTagKey
        TagValue: !Ref QSTagValue
      Scope:
        ComplianceResourceTypes:
        - AWS::ElasticLoadBalancingV2::LoadBalancer
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt LambdaALBEncryption.Arn
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
  LambdaALBEncryption:
    Type: AWS::Lambda::Function
    Properties:
      Description: Checks if ALB only allows HTTPS
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaConfigRole.Arn
      Timeout: 30
      Code:
        ZipFile: | 
          from __future__ import print_function
          import json
          import boto3
          # Create boto3 clients
          config = boto3.client('config')
          elb = boto3.client('elbv2')
          def evaluate_compliance(configuration_item, rule_parameters):
            desired_port = rule_parameters['DesiredPort']
            desired_protocol = rule_parameters['DesiredProtocol']
            tag_key = rule_parameters['TagKey']
            tag_value = rule_parameters['TagValue']

            desired_tag = dict(Key=tag_key, Value=tag_value)

            load_balancer_arn = configuration_item['configuration']['loadBalancerArn']
            
            # First check if the load balancer is in scope (i.e. check tags)
            tag_response = elb.describe_tags(ResourceArns=[load_balancer_arn])

            if 'TagDescriptions' not in tag_response:
              return {
                'compliance_type': 'NOT_APPLICABLE',
                'annotation': 'Resource has no tags. Out of scope'
              }
            if 'Tags' in tag_response['TagDescriptions'][0]:
              if len(tag_response['TagDescriptions'][0]['Tags']) < 1:
                return {
                  'compliance_type': 'NOT_APPLICABLE',
                  'annotation': 'Resource has no tags. Out of scope'
                }
              if desired_tag not in tag_response['TagDescriptions'][0]['Tags']:
                return {
                  'compliance_type': 'NOT_APPLICABLE',
                  'annotation': 'Resource tags do not match tags. Out of scope'
                }
            
            # At this point we know in scope as the tag is in the ELB
            # Check for compliance - port and SSL certificate
            listeners_obj = elb.describe_listeners(LoadBalancerArn=load_balancer_arn)
            
            for listener in listeners_obj['Listeners']:
              if desired_protocol != listener['Protocol']:
                return {
                  'compliance_type': 'NON_COMPLIANT',
                  'annotation': 'Insecure %s protocol being used for the load balancer' % listener['Protocol']
                }
              if int(desired_port) != listener['Port']:
                return {
                  'compliance_type': 'NON_COMPLIANT',
                  'annotation': '%s port being used for the load balancer rather than %s' % (listener['Port'], desired_port)
                }
              if len(listener['Certificates']) < 1:
                return {
                  'compliance_type': 'NON_COMPLIANT',
                  'annotation': 'Does not have a SSL Cert installed'
                }
              for cert in listener['Certificates']:
                if 'CertificateArn' not in cert:
                  return {
                    'compliance_type': 'NON_COMPLIANT',
                    'annotation': 'Invalid SSL Cert installed - no ARN found'
                  }
            return {
              'compliance_type': 'COMPLIANT',
              'annotation': 'Load balancer is secure'
            }
          def handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            rule_parameters = json.loads(event['ruleParameters'])
            configuration_item = invoking_event['configurationItem']
            # Check for compliance
            evaluation = evaluate_compliance(configuration_item, rule_parameters)
            result_token = event['resultToken'] if 'resultToken' in event else 'No token found'
            # Post result
            config.put_evaluations(
                Evaluations=[
                    {
                        'ComplianceResourceType': configuration_item['resourceType'],
                        'ComplianceResourceId': configuration_item['resourceId'],
                        'ComplianceType': evaluation['compliance_type'],
                        'Annotation': evaluation['annotation'],
                        'OrderingTimestamp': configuration_item['configurationItemCaptureTime']
                    },
                ],
                ResultToken=result_token
            )

  # EBS volume changes detected
  EBSVolumeEncryption:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks to ensure attached EBS volumes are encrypted
      Scope:
        TagKey: !Ref QSTagKey
        TagValue: !Ref QSTagValue
      Source:
        Owner: AWS
        SourceIdentifier: ENCRYPTED_VOLUMES

  S3BucketPublicReadProhibited:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks that your S3 buckets do not allow public read access. If an S3 bucket policy or bucket ACL allows public read access, the bucket is noncompliant.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED

  S3BucketPublicWriteProhibited:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks that your S3 buckets do not allow public write access. If an S3 bucket policy or bucket ACL allows public write access, the bucket is noncompliant.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED

  #Update or delete of a security Group
  TriggerSecurityGroupPortBlocked:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaSecurityGroupPortBlocked.Arn
      Principal: config.amazonaws.com
  RuleSecurityGroupPortBlocked:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks to ensure security groups do not have a specific port open
      InputParameters:
        UndesiredPort: 80
        TagKey: !Ref QSTagKey
        TagValue: !Ref QSTagValue
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt LambdaSecurityGroupPortBlocked.Arn
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
  LambdaSecurityGroupPortBlocked:
    Type: AWS::Lambda::Function
    Properties:
      Description: Checks if Security Groups don't have a specific port open
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaConfigRole.Arn
      Timeout: 30
      Code:
        ZipFile: | 
          from __future__ import print_function
          import json
          import boto3
          config = boto3.client('config')
          ec2 = boto3.client('ec2')
          def evaluate_compliance(configuration_item, rule_parameters):
              undesired_port = int(rule_parameters['UndesiredPort'])
              tag_key = rule_parameters['TagKey']
              tag_value = rule_parameters['TagValue']
              configuration = configuration_item['configuration']

              desired_tag = dict(Key=tag_key, Value=tag_value)

              if not desired_tag in configuration['tags']:
                return {
                  'compliance_type': 'NOT_APPLICABLE',
                  'annotation': 'Resource tags do not match desired tag. Out of scope'
                }
   
              for ip_permissions in configuration['ipPermissions']:
                  if 'fromPort' not in ip_permissions and 'toPort' not in ip_permissions:
                      return {
                          'compliance_type': 'NON_COMPLIANT',
                          'annotation': 'Security Group is open to all traffic so port %s is not blocked' % str(undesired_port)
                      }
                  if ip_permissions['fromPort'] <= undesired_port <= ip_permissions['toPort']:
                      return {
                          'compliance_type': 'NON_COMPLIANT',
                          'annotation': 'Security Group port %s is not blocked' % str(undesired_port)
                      }
              return {
                  'compliance_type': 'COMPLIANT',
                  'annotation': 'Port %s not open for ingress' % str(undesired_port)
              }
          def handler(event, context):
              invoking_event = json.loads(event['invokingEvent'])
              rule_parameters = json.loads(event['ruleParameters'])
              configuration_item = invoking_event['configurationItem']
              evaluation = evaluate_compliance(configuration_item, rule_parameters)
              result_token = event['resultToken'] if 'resultToken' in event else 'No token found'
              config.put_evaluations(
                  Evaluations=[
                      {
                          'ComplianceResourceType': configuration_item['resourceType'],
                          'ComplianceResourceId': configuration_item['resourceId'],
                          'ComplianceType': evaluation['compliance_type'],
                          'Annotation': evaluation['annotation'],
                          'OrderingTimestamp': configuration_item['configurationItemCaptureTime']
                      },
                  ],
                  ResultToken=result_token
              )

  UnrestrictedSSH:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks whether security groups that are in use disallow unrestricted incoming SSH traffic
      Scope:
        TagKey: !Ref QSTagKey
        TagValue: !Ref QSTagValue
      Source:
        Owner: AWS
        SourceIdentifier: INCOMING_SSH_DISABLED

  UnrestrictedPorts:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks whether security groups that are in use disallow unrestricted incoming TCP traffic to the specified ports.
      InputParameters:
        blockedPort1: 22
        blockedPort3: 80
        blockedPort4: 3389
        blockedPort5: 8850
      Scope:
        TagKey: !Ref QSTagKey
        TagValue: !Ref QSTagValue
      Source:
        Owner: AWS
        SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC


