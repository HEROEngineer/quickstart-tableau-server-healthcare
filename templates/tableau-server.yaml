AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS CloudFormation Template: Deploys infrastructure for Tableau Server. (qs-1oui27s1g)"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS Environment and Machine Configuration
        Parameters:
        - AMIOS
        - BastionSecurityGroup
        - InstanceType
        - KeyPairName
        - PublicSubnetIds
        - PrivateSubnetIds
        - SourceCIDR
        - VpcCidr
        - VpcId
        - ConfigRecorder
        - ConfigDeliveryChannel
      - Label:
          default: Server DNS configuration
        Parameters:
        - AWSHostedZoneID
        - AWSPublicFQDN
        - SSLCertificateARN
      - Label:
          default: Secrets
        Parameters:
        - Username
        - Password
        - TableauServerAdminUser
        - TableauServerAdminPassword
      - Label:
          default: Registration
        Parameters:
        - AcceptEULA
        - TableauServerLicenseKey
        - RegFirstName
        - RegLastName
        - RegEmail
        - RegCompany
        - RegTitle
        - RegDepartment
        - RegIndustry
        - RegPhone
        - RegCity
        - RegState
        - RegZip
        - RegCountry
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
        - QSS3BucketName
        - QSS3BucketRegion
        - QSS3KeyPrefix
        - QSTagKey
        - QSTagValue
    ParameterLabels:
      AMIOS:
        default: AMI Operating System
      AWSHostedZoneID:
        default: DNS Zone ID
      AWSPublicFQDN:
        default: Full DNS Name for Tableau Server
      AcceptEULA:
        default: Accept Tableau End User License Agreement
      BastionSecurityGroup:
        default: Bastion Host Security Group ID
      ConfigRecorder:
        default: AWS Config Recorder ARN
      ConfigDeliveryChannel:
        default: AWS Config Delivery Channel ARN
      InstanceType:
        default: Tableau Server instance type
      KeyPairName:
        default: Key Pair Name
      Password:
        default: Tableau Services Manager (TSM) administrator password
      PublicSubnetIds:
        default: Public Subnet IDs in your VPC
      PrivateSubnetIds:
        default: Private Subnet IDs in your VPC
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      QSTagKey:
        default: Quick Start Tag key
      QSTagValue:
        default: Quick Start Tag value
      RegCity:
        default: City
      RegCompany:
        default: Company
      RegCountry:
        default: Country
      RegDepartment:
        default: Department
      RegEmail:
        default: Email Address
      RegFirstName:
        default: First Name
      RegIndustry:
        default: Industry
      RegLastName:
        default: Last Name
      RegPhone:
        default: Phone
      RegState:
        default: State
      RegTitle:
        default: Title
      RegZip:
        default: Zip/Postal Code
      SourceCIDR:
        default: Source CIDR for Access
      SSLCertificateARN:
        default: SSL Certificate ARN (Requires matching DNS name)
      TableauServerAdminPassword:
        default: Tableau Server administrator password
      TableauServerAdminUser:
        default: Tableau Server administrator username
      TableauServerLicenseKey:
        default: Tableau Activation Key
      Username:
        default: Tableau Services Manager (TSM) administrator username
      VpcCidr:
        default: VPC CIDR Block
      VpcId:
        default: VPC ID

Parameters:
  AMIOS:
    AllowedValues:
      - Amazon-Linux-2
      - CentOS-7-HVM
      - Ubuntu-Server-16.04-LTS-HVM
      - Windows-Server-2012-R2
    Description: The operating system (Microsoft Windows Server, CentOS, Ubuntu Server, or Amazon Linux 2) on the EC2 instance where Tableau Server will be installed. If you choose CentOS, make sure that you have a subscription to the CentOS AMI in AWS Marketplace
    Default: Amazon-Linux-2
    Type: String
  AWSHostedZoneID:
    Description: DNS Zone ID to contain the server's DNS entry.
    Type: String
  AWSPublicFQDN:
    Description: Tableau Server portal will be reachable at this address.
    Type: String
  AcceptEULA:
    AllowedValues:
    - 'Yes'
    - 'No'
    Default: 'No'
    Description: 'View the EULA at the Link: https://www.tableau.com/eula'
    Type: String
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: EC2 Security Group for the bastion host.
  ConfigRecorder:
    Type: String
    Default: ""
    Description: Config Recorder in your AWS Region. Leaving empty will try to create a new recorder.
  ConfigDeliveryChannel:
    Type: String
    Default: ""
    Description: Config Delivery Channel in your AWS Region. Leaving empty will try to create a new recorder. Required if you specify Config Recorder
  InstanceType:
    AllowedValues:
    - c5.4xlarge
    - c5d.4xlarge
    - c4.4xlarge
    - m4.4xlarge
    - m5.4xlarge
    - r5d.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: m5.4xlarge
    Description: The EC2 instance type where Tableau Server will be installed.
    Type: String
  KeyPairName:
    AllowedPattern: ".+"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  Password:
    Description: Tableau Services Manager (TSM) administrator password
    Type: String
    NoEcho: true
    AllowedPattern: "^(?=[a-zA-Z0-9#@$?!]{8,}$)(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).*"
    MinLength: '8'
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnets in your VPC.
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets in your VPC.
  VpcCidr:
    Type: String
    Description: VPC CIDR Block.
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-tableau-server-healthcare/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  QSTagKey:
    Type: String
    Description: Tag key to identify resources from this Quick Start.
    Default: QuickStartID
  QSTagValue:
    Type: String
    Description: Tag value to identify resources from this Quick Start.
    Default: TableauServerHealthcare
  RegCity:
    Description: City
    MinLength: 1
    Type: String
  RegCompany:
    Description: Company
    MinLength: 1
    Type: String
  RegCountry:
    Description: Country
    MinLength: 1
    Type: String
  RegDepartment:
    Description: Department
    MinLength: 1
    Type: String
  RegEmail:
    Description: Email
    MinLength: 1
    Type: String
  RegFirstName:
    Description: First Name
    MinLength: 1
    Type: String
  RegIndustry:
    Description: Industry
    MinLength: 1
    Type: String
  RegLastName:
    Description: Last Name
    MinLength: 1
    Type: String
  RegPhone:
    Description: Phone
    MinLength: 1
    Type: String
  RegState:
    Description: State
    MinLength: 1
    Type: String
  RegTitle:
    Description: Title
    MinLength: 1
    Type: String
  RegZip:
    Description: ZIP/Postal Code
    MinLength: 1
    Type: String
  SourceCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: IP address/range to allow access from
    Type: String
  SSLCertificateARN:
    Type: String
    Default: ""
    Description: The Amazon Resource Name for the existing SSL cert you wish to use; empty for none
  TableauServerAdminPassword:
    Description: The password of the initial administrator for Tableau Server
    MinLength: 1
    NoEcho: true
    Type: String
  TableauServerAdminUser:
    Description: The name of the initial administrator for Tableau Server
    MinLength: 1
    Type: String
  TableauServerLicenseKey:
    Description: License Key
    Type: String
  Username:
    Description: Tableau Services Manager (TSM) administrator username (cannot be
      Administrator)
    Type: String
    AllowedPattern: "[A-Za-z0-9]+"
    MaxLength: '30'
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Amazon VPC ID

Rules:
  AcceptEULARule:
    Assertions:
    - Assert:
        !Equals ['Yes', !Ref AcceptEULA]
      AssertDescription: 'User must agree to Tableau Software EULA which can be viewed at the link: https://www.tableau.com/eula'

Mappings:
  AWSAMIRegionMap:
    AMI:
      CENTOS7HVM: CentOS Linux 7 x86_64 HVM 1805_01
      US1604HVM: Ubuntu 16.04 LTS HVM 20180912
      WS2012R2: Windows_Server-2012-R2_RTM-English-64Bit-Base-2019.02.13
      AMZNLINUX2: Amazon-Linux-2 LTS amzn2-ami-hvm-2.0.20180924-x86_64-gp2 
    ap-northeast-1:
      CENTOS7HVM: ami-06a46da680048c8ae
      US1604HVM: ami-078648cce0d33c256
      WS2012R2: ami-023d0bbec153b3921
      AMZNLINUX2: ami-0a1c2ec61571737db
    ap-northeast-2:
      CENTOS7HVM: ami-06e83aceba2cb0907
      US1604HVM: ami-0539a1389fedcbdc8
      WS2012R2: ami-0f9037585d363f83d
      AMZNLINUX2: ami-01af223aa7f274198
    ap-south-1:
      CENTOS7HVM: ami-026f33d38b6410e30
      US1604HVM: ami-03b8a287edc0c1253
      WS2012R2: ami-0e8eda5756f585e23
      AMZNLINUX2: ami-0447a12f28fddb066
    ap-southeast-1:
      CENTOS7HVM: ami-07f65177cb990d65b
      US1604HVM: ami-05f112c29645f0812
      WS2012R2: ami-0cc501d5ad7d2c943
      AMZNLINUX2: ami-0615132a0f36d24f4
    ap-southeast-2:
      CENTOS7HVM: ami-0b2045146eb00b617
      US1604HVM: ami-0e4bc04bd401729d6
      WS2012R2: ami-04a372fb99c40fd88
      AMZNLINUX2: ami-088ff0e3bde7b3fdf
    ca-central-1:
      CENTOS7HVM: ami-04a25c39dc7a8aebb
      US1604HVM: ami-0e2df0719252d4491
      WS2012R2: ami-0f7c7733ad14b4065
      AMZNLINUX2: ami-0f75c2980c6a5851d
    eu-central-1:
      CENTOS7HVM: ami-0e8286b71b81c3cc1
      US1604HVM: ami-05ed2c1359acd8af6
      WS2012R2: ami-0051a22d805f0a121
      AMZNLINUX2: ami-0a02ee601d742e89f
    eu-west-1:
      CENTOS7HVM: ami-0b850cf02cc00fdc8
      US1604HVM: ami-008320af74136c628
      WS2012R2: ami-05903fb4660e4b884
      AMZNLINUX2: ami-0ea3405d2d2522162
    eu-west-2:
      CENTOS7HVM: ami-09e5afc68eed60ef4
      US1604HVM: ami-004c1e61ae5d76090
      WS2012R2: ami-04eb1874f7b7e4725
      AMZNLINUX2: ami-032598fcc7e9d1c7a
    eu-west-3:
      CENTOS7HVM: ami-0cb72d2e599cffbf9
      US1604HVM: ami-08eebff62e61110b7
      WS2012R2: ami-0d6114f4fa8b7ddc7
      AMZNLINUX2: ami-01c72e187b357583b
    sa-east-1:
      CENTOS7HVM: ami-0b30f38d939dd4b54
      US1604HVM: ami-0ddec8b41a3411374
      WS2012R2: ami-0000e71026bf9df53
      AMZNLINUX2: ami-0477a95397a9154b3
    us-east-1:
      CENTOS7HVM: ami-0affd4508a5d2481b
      US1604HVM: ami-0a0ddd875a1ea2c7f
      WS2012R2: ami-00360458a879ed9a6
      AMZNLINUX2: ami-09d95fab7fff3776c
    us-east-2:
      CENTOS7HVM: ami-01e36b7901e884a10
      US1604HVM: ami-04781752c9b20ea41
      WS2012R2: ami-03dd1e9bf68039794
      AMZNLINUX2: ami-026dea5602e368e96
    us-west-1:
      CENTOS7HVM: ami-098f55b4287a885ba
      US1604HVM: ami-0c1e832407373333f
      WS2012R2: ami-0cffd49f6b77850ae
      AMZNLINUX2: ami-04e59c05167ea7bd5
    us-west-2:
      CENTOS7HVM: ami-0bc06212a56393ee1
      US1604HVM: ami-0a4df59262c92cf19
      WS2012R2: ami-0a80a17ce7f9bea47
      AMZNLINUX2: ami-0e34e7b9ca0ace12d
  AWSAMINameMap:
    CentOS-7-HVM:
      Code: CENTOS7HVM
    Ubuntu-Server-16.04-LTS-HVM:
      Code: US1604HVM
    Windows-Server-2012-R2: 
      Code: WS2012R2
    Amazon-Linux-2:
      Code: AMZNLINUX2

Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  IsWindows: !Equals [ !Ref AMIOS, Windows-Server-2012-R2 ]
  IsLinux: !Not [ Condition: IsWindows ]
  IsUbuntu: !Equals [ !Ref AMIOS,  Ubuntu-Server-16.04-LTS-HVM ]
  IsCentosOrAmazonLinux: !Or [ !Equals [ !Ref AMIOS,  CentOS-7-HVM ], !Equals [ !Ref AMIOS, Amazon-Linux-2 ] ]
  NoSSLCertificate: !Equals [ '', !Ref SSLCertificateARN ]

Resources:
  # Create a log bucket
  LogStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/logging.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        ConfigRecorderName: !Ref ConfigRecorder
        ConfigDeliveryChannelName: !Ref ConfigDeliveryChannel
        QSS3BucketName: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        QSS3BucketRegion: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        QSTagKey: !Ref QSTagKey
        QSTagValue: !Sub ${QSTagValue}-${AWS::StackName}

  # Create the ELB
  ElbStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: LogStack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/encrypted-elb.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AWSHostedZoneID: !Ref AWSHostedZoneID
        AWSPublicFQDN: !Ref AWSPublicFQDN
        LogBucket: !GetAtt LogStack.Outputs.LogBucket
        PublicSubnetIds: !Join [ ',', !Ref PublicSubnetIds ]
        QSS3BucketName: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        QSS3BucketRegion: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        QSTagKey: !Ref QSTagKey
        QSTagValue: !Sub ${QSTagValue}-${AWS::StackName}
        SourceCIDR: !Ref SourceCIDR
        SSLCertificateARN: !Ref SSLCertificateARN
        VpcCidr: !Ref VpcCidr
        VpcId: !Ref VpcId

  # Encrypt the AMI root volume
  EncryptAmiStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
    - ElbStack
    - LogStack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/encrypt-ami.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AmiId: !FindInMap [ AWSAMIRegionMap , !Ref "AWS::Region", !FindInMap [ AWSAMINameMap, !Ref AMIOS, Code ] ]
        AmiRegion: !Ref "AWS::Region"
        SubnetId: !Select [ 0, !Ref PrivateSubnetIds ]
        QSTagKey: !Ref QSTagKey
        QSTagValue: !Sub ${QSTagValue}-${AWS::StackName}

  # Configure Instance Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/RDP access and HTTPS from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !If [ IsWindows, 3389, 22 ]
        ToPort: !If [ IsWindows, 3389, 22 ]
        SourceSecurityGroupId: !Ref BastionSecurityGroup
      - IpProtocol: tcp
        FromPort: 8850
        ToPort: 8850
        SourceSecurityGroupId: !GetAtt ElbStack.Outputs.ElbSecurityGroup
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !GetAtt ElbStack.Outputs.ElbSecurityGroup
      Tags:
      - Key: !Ref QSTagKey
        Value: !Sub ${QSTagValue}-${AWS::StackName}
      VpcId: !Ref VpcId

  TableauServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: CreateTags
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ec2:Describe*
            - ec2:CreateTags
            Resource: "*"
  TableauServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref TableauServerInstanceRole

  TableauServerWindows:
    Type: AWS::CloudFormation::Stack
    Condition: IsWindows
    DependsOn: 
    - EncryptAmiStack
    - ElbStack
    - TableauServerInstanceProfile
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/tableau-server-windows.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AcceptEULA: !Ref AcceptEULA
        ElbTargetGroups: !GetAtt ElbStack.Outputs.ElbTargetGroupHTTPS
        ImageId: !GetAtt EncryptAmiStack.Outputs.EncryptedAmiId
        InstanceSecurityGroup: !Ref InstanceSecurityGroup
        InstanceType: !Ref InstanceType
        TableauServerInstanceProfile: !Ref TableauServerInstanceProfile
        KeyPairName: !Ref KeyPairName
        Password: !Ref Password
        PrivateSubnetIds: !Join [',', !Ref PrivateSubnetIds]
        RegCity: !Ref RegCity
        RegCompany: !Ref RegCompany
        RegCountry: !Ref RegCountry
        RegDepartment: !Ref RegDepartment
        RegEmail: !Ref RegEmail
        RegFirstName: !Ref RegFirstName
        RegIndustry: !Ref RegIndustry
        RegLastName: !Ref RegLastName
        RegPhone: !Ref RegPhone
        RegState: !Ref RegState
        RegTitle: !Ref RegTitle
        RegZip: !Ref RegZip
        QSTagKey: !Ref QSTagKey
        QSTagValue: !Sub ${QSTagValue}-${AWS::StackName}
        TableauServerAdminUser: !Ref TableauServerAdminUser
        TableauServerAdminPassword: !Ref TableauServerAdminPassword
        TableauServerLicenseKey: !Ref TableauServerLicenseKey
        Username: !Ref Username

  TableauServerUbuntu:
    Type: AWS::CloudFormation::Stack
    Condition: IsUbuntu
    DependsOn: 
    - EncryptAmiStack
    - ElbStack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/tableau-server-ubuntu.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AcceptEULA: !Ref AcceptEULA
        ElbTargetGroups: !GetAtt ElbStack.Outputs.ElbTargetGroupHTTPS
        ImageId: !GetAtt EncryptAmiStack.Outputs.EncryptedAmiId
        InstanceSecurityGroup: !Ref InstanceSecurityGroup
        InstanceType: !Ref InstanceType
        TableauServerInstanceProfile: !Ref TableauServerInstanceProfile
        KeyPairName: !Ref KeyPairName
        Password: !Ref Password
        PrivateSubnetIds: !Join [',', !Ref PrivateSubnetIds ]
        RegCity: !Ref RegCity
        RegCompany: !Ref RegCompany
        RegCountry: !Ref RegCountry
        RegDepartment: !Ref RegDepartment
        RegEmail: !Ref RegEmail
        RegFirstName: !Ref RegFirstName
        RegIndustry: !Ref RegIndustry
        RegLastName: !Ref RegLastName
        RegPhone: !Ref RegPhone
        RegState: !Ref RegState
        RegTitle: !Ref RegTitle
        RegZip: !Ref RegZip
        QSTagKey: !Ref QSTagKey
        QSTagValue: !Sub ${QSTagValue}-${AWS::StackName}
        TableauServerAdminUser: !Ref TableauServerAdminUser
        TableauServerAdminPassword: !Ref TableauServerAdminPassword
        TableauServerLicenseKey: !Ref TableauServerLicenseKey
        Username: !Ref Username

  TableauServerCentosAmazonLinux:
    Type: AWS::CloudFormation::Stack
    Condition: IsCentosOrAmazonLinux
    DependsOn: 
    - EncryptAmiStack
    - ElbStack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/tableau-server-centos-amazonlinux.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AMIOS: !Ref AMIOS
        AcceptEULA: !Ref AcceptEULA
        ElbTargetGroups: !GetAtt ElbStack.Outputs.ElbTargetGroupHTTPS
        ImageId: !GetAtt EncryptAmiStack.Outputs.EncryptedAmiId
        InstanceSecurityGroup: !Ref InstanceSecurityGroup
        InstanceType: !Ref InstanceType
        TableauServerInstanceProfile: !Ref TableauServerInstanceProfile
        KeyPairName: !Ref KeyPairName
        Password: !Ref Password
        PrivateSubnetIds: !Join [',', !Ref PrivateSubnetIds ]
        RegCity: !Ref RegCity
        RegCompany: !Ref RegCompany
        RegCountry: !Ref RegCountry
        RegDepartment: !Ref RegDepartment
        RegEmail: !Ref RegEmail
        RegFirstName: !Ref RegFirstName
        RegIndustry: !Ref RegIndustry
        RegLastName: !Ref RegLastName
        RegPhone: !Ref RegPhone
        RegState: !Ref RegState
        RegTitle: !Ref RegTitle
        RegZip: !Ref RegZip
        QSTagKey: !Ref QSTagKey
        QSTagValue: !Sub ${QSTagValue}-${AWS::StackName}
        TableauServerAdminUser: !Ref TableauServerAdminUser
        TableauServerAdminPassword: !Ref TableauServerAdminPassword
        TableauServerLicenseKey: !Ref TableauServerLicenseKey
        Username: !Ref Username

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt ElbStack.Outputs.ElbDns
    Description: DNS Name for the load balancer
  RecordSet: 
    Value: !GetAtt ElbStack.Outputs.RecordSet
    Description: Domain Name of the Record Set
  TableauServerURL:
    Description: Public DNS name to reach cluster
    Value: !Sub https://${AWSPublicFQDN}
  TSMUrl:
    Description: URL to access TSM GUI. Accessible via Bastion Host
    Value: !Sub https://${AWSPublicFQDN}:8850