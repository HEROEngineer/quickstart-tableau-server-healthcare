AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for config rules

Parameters:
  LogBucketName:
    Type: String
    Description: Log bucket
  QSTagKey:
    Type: String
    Description: Tag key to identify resources from this Quick Start
  QSTagValue:
    Type: String
    Description: Tag value to identify resources from this Quick Start

Resources:
  # ConfigRole
  ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - "config.amazonaws.com"
            Action:
              - "sts:AssumeRole"
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole

  ConfigRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConfigRolePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource: !Sub arn:aws:s3:::${LogBucket}/*
          Condition:
            StringLike:
              s3:x-amz-acl: bucket-owner-full-control
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource: "*"
        - Effect: Allow
          Action:
          - "config:Put*"
          Resource: "*"
      Roles:
      - !Ref ConfigRole

  LambdaConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    #  Condition: NoConfigRecorder
    Properties:
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
      RoleARN: !GetAtt ConfigRole.Arn
  
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    #  Condition: NoConfigDeliveryChannel
    Properties:
      S3BucketName: !Ref LogBucketName
      S3KeyPrefix: "config"

  #IAM Configuration Change Detected
  
  #CloudTrail log config change detected
  CloudTrailEnabled:
    Description: Checks whether AWS CloudTrail is enabled in your AWS account
    MaximumExecutionFrequency: One_Hour
    Scope:
      ComplianceResourceTypes:
      - AWS::CloudTrail::Trail
    Source:
      Owner: AWS
      SourceIdentifier: CLOUD_TRAIL_ENABLED
  
  #Config change detected
  TriggerConfigRecorderEnabled:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaConfigRecorderEnabled
      Principal: config.amazonaws.com
  RuleConfigRecorderEnabled:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigRecorder
    Properties:
      ConfigRuleName: ConfigRecorderEnabled
      Description: Checks if AWS Config recorder is turned on. N.B. This current rule does not check for S3 or SNS delivery mechanisms.
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !Ref LambdaConfigRecorderEnabled
        SourceDetails:
        - EventSource: aws.config
          MaximumExecutionFrequency: One_Hour
          MessageType: ScheduledNotification
  LambdaConfigRecorderEnabled:
    Type: AWS::Lambda::Function
    Properties:
      Description: Checks if Config Recorder is enabled
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaConfigRecorderRole
      Timeout: 30
      Code:
        ZipFile: | 
          import boto3
          import json
          from datetime import datetime
          config = boto3.client('config')
          def evaluate_compliance(rule_parameters):
              # First check configuration recorder is created
              config_recorder_response = config.describe_configuration_recorder_status()
              if 'ConfigurationRecordersStatus' not in config_recorder_response or \
                              len(config_recorder_response['ConfigurationRecordersStatus']) < 1:
                  return {
                      'compliance_type': 'NON_COMPLIANT',
                      'annotation': 'Cannot find config recorder status'
                  }
              for config_recorder in config_recorder_response['ConfigurationRecordersStatus']:
                  if not config_recorder['recording']:
                      return {
                          'compliance_type': 'NON_COMPLIANT',
                          'annotation': 'Config recorder is not recording'
                      }
              # Check that there are delivery channels and that they're mapping to the appropriate buckets
              delivery_channels_response = config.describe_delivery_channels()
              if 'DeliveryChannels' not in delivery_channels_response or len(delivery_channels_response['DeliveryChannels']) < 1:
                  return {
                      'compliance_type': 'NON_COMPLIANT',
                      'annotation': 'No delivery channel for config recorder'
                  }
              return {
                  'compliance_type': 'COMPLIANT',
                  'annotation': 'Config recorder enabled with appropriate delivery channel'
              }
          def handler(event, context):
              today = datetime.today()
              rule_parameters = json.loads(event['ruleParameters'])
              evaluation = evaluate_compliance(rule_parameters)
              result_token = event['resultToken'] if 'resultToken' in event else 'No token found'
              config.put_evaluations(
                  Evaluations=[
                      {
                          'ComplianceResourceType': 'AWS::::Account',
                          'ComplianceResourceId': event['accountId'],
                          'ComplianceType': evaluation['compliance_type'],
                          'Annotation': evaluation['annotation'],
                          'OrderingTimestamp': datetime(today.year, today.month, today.day, today.hour)
                      }
                  ],
                  ResultToken=result_token
              )
          
  #ELB Config change detected
  TriggerALBEncryption:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaConfigRecorderEnabled
      Principal: config.amazonaws.com
  RuleALBEncryption:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigRecorder
    Properties:
      ConfigRuleName: ALBEncryption
      Description: Checks to ensure that all application load balancers are only reachable via HTTPS endpoints and not HTTP as well as have a cert on the listener
      InputParameters:
        DesiredPort: 443
        DesiredProtocol: HTTPS
      Scope:
        ComplianceResourceTypes:
        - AWS::ElasticLoadBalancingV2::LoadBalancer
        TagKey: !Ref QSTagKey
        TagValue: !Ref QSTagValue
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !Ref LambdaALBEncryption
        SourceDetails:
        - EventSource: aws.config
          MaximumExecutionFrequency: One_Hour
          MessageType: ScheduledNotification
  LambdaALBEncryption:
    Type: AWS::Lambda::Function
    Properties:
      Description: Checks if Config Recorder is enabled
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaConfigRecorderRole
      Timeout: 30
      Code:
        ZipFile: | 
          from __future__ import print_function
          from datetime import datetime
          import json
          import boto3
          config = boto3.client('config')
          elb = boto3.client('elbv2')
          def evaluate_compliance(configuration_item, rule_parameters):
              load_balancer_arn = configuration_item['configuration']['loadBalancerArn']
              desired_port = int(rule_parameters['DesiredPort'])
              desired_protocol = rule_parameters['DesiredProtocol']
              listeners_obj = elb.describe_listeners(LoadBalancerArn=load_balancer_arn)
              for listener in listeners_obj['Listeners']:
                  if desired_protocol != listener['Protocol']:
                      return {
                          'compliance_type': 'NON_COMPLIANT',
                          'annotation': 'Listener %s on Load Balancer %s: Insecure %s protocol being used for the load balancer' % (listener['ListenerArn'], listener['LoadBalancerArn'], listener['Protocol'])
                      }
                  if desired_port != listener['Protocol']:
                      return {
                          'compliance_type': 'NON_COMPLIANT',
                          'annotation': 'Listener %s on Load Balancer %s: %s port being used for the load balancer rather than %s' % (listener['ListenerArn'], listener['LoadBalancerArn'], listener['Port'], desired_port)
                      }
                  if len(listener['Certificates']) < 1:
                      return {
                          'compliance_type': 'NON_COMPLIANT',
                          'annotation': 'Listener %s on Load Balancer %s: Does not have a SSL Cert installed' % (listener['ListenerArn'], listener['LoadBalancerArn'])
                      }
                  for cert in listener['Certificates']:
                      if 'CertificateArn' not in cert:
                          return {
                              'compliance_type': 'NON_COMPLIANT',
                              'annotation': 'Listener %s on Load Balancer %s: Invalid SSL Cert installed - no ARN found' % (listener['ListenerArn'], listener['LoadBalancerArn'])
                          }
              return {
                  'compliance_type': 'COMPLIANT',
                  'annotation': 'Load balancer is configured with %s on port %s' % (desired_protocol, desired_port)
              }
          def lambda_handler(event, context):
              invoking_event = json.loads(event['invokingEvent'])
              rule_parameters = json.loads(event['ruleParameters'])
              configuration_item = invoking_event['configurationItem']
              evaluation = evaluate_compliance(configuration_item, rule_parameters)
              result_token = event['resultToken'] if 'resultToken' in event else 'No token found'
              config.put_evaluations(
                  Evaluations=[
                      {
                          'ComplianceResourceType': configuration_item['resourceType'],
                          'ComplianceResourceId': configuration_item['resourceId'],
                          'ComplianceType': evaluation['compliance_type'],
                          'Annotation': evaluation['annotation'],
                          'OrderingTimestamp': configuration_item['configurationItemCaptureTime']
                      },
                  ],
                  ResultToken=result_token
              )

  # EBS volume changes detected
  EBSVolumeEncryption:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks to ensure attached EBS volumes are encrypted
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Volume
        TagKey: !Ref QSTagKey
        TagValue: !Ref QSTagValue
      Source:
        Owner: AWS
        SourceIdentifier: ENCRYPTED_VOLUMES

  S3BucketPublicReadProhibited:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks that your S3 buckets do not allow public read access. If an S3 bucket policy or bucket ACL allows public read access, the bucket is noncompliant.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED

  S3BucketPublicWriteProhibited:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks that your S3 buckets do not allow public write access. If an S3 bucket policy or bucket ACL allows public write access, the bucket is noncompliant.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED

  #Update or delete of a security Group
  RuleSecurityGroupPortBlocked:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks to ensure security groups do not have a specific port open
      InputParameters:
        UndesiredPort: 80
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
        TagKey: !Ref QSTagKey
        TagValue: !Ref QSTagValue
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !Ref LambdaSecurityGroupPortBlocked
        SourceDetails:
        - EventSource: aws.config
          MaximumExecutionFrequency: One_Hour
          MessageType: ScheduledNotification

  UnrestrictedSSH:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks whether security groups that are in use disallow unrestricted incoming SSH traffic
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
        TagKey: !Ref QSTagKey
        TagValue: !Ref QSTagValue
      Source:
        Owner: AWS
        SourceIdentifier: INCOMING_SSH_DISABLED

  UnrestrictedPorts:
    Type: AWS::Config::ConfigRule
    Properties:
      Description: Checks whether security groups that are in use disallow unrestricted incoming TCP traffic to the specified ports.
      InputParameters:
        blockedPort1: 22
        blockedPort3: 80
        blockedPort4: 3389
        blockedPort5: 8850
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
        TagKey: !Ref QSTagKey
        TagValue: !Ref QSTagValue
      Source:
        Owner: AWS
        SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC

Output:
  LogBucketName:
    Value: !If [ NoLogBucket, !Ref LogBucket, LogBucketName ]

